name: CI/CD
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.idea'
      - '.gitignore'
  pull_request:
    paths-ignore:
      - '**.md'
      - '.idea'
      - '.gitignore'

defaults:
  run:
    shell: 'bash'

jobs:
  checks:
    name: Lint & Typecheck
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14

      # TODO: Install not all dependencies, but only those required for this workflow
      - run: npm ci

      - uses: haya14busa/action-cond@v1
        id: reporter
        with:
          cond: ${{ github.event_name == 'pull_request' }}
          if_true: "github-pr-review"
          if_false: "github-check"

      - name: Run ESLint
        uses: reviewdog/action-eslint@v1
        with:
          fail_on_error: true
          github_token: ${{ secrets.github_token }}
          eslint_flags: '. --ext js,ts,vue'
          reporter: ${{ steps.reporter.outputs.value }}

      - uses: reviewdog/action-setup@v1

      - run: npx --no-install @vuedx/vuedx-typecheck ./src/main --rdjson  | reviewdog -name typecheck -f rdjson -fail-on-error -reporter=${{ steps.reporter.outputs.value }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.github_token }}
      - run: npx --no-install @vuedx/vuedx-typecheck ./src/preload --rdjson  | reviewdog -name typecheck -f rdjson -fail-on-error -reporter=${{ steps.reporter.outputs.value }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.github_token }}
      - run: npx --no-install @vuedx/vuedx-typecheck ./src/renderer --rdjson  | reviewdog -name typecheck -f rdjson -fail-on-error -reporter=${{ steps.reporter.outputs.value }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.github_token }}

  test:
    strategy:
      matrix:
        os: [ windows-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14

      - run: npm ci
      - run: npm test

  draft_release:
    needs: [ test, checks ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Get version from current date
        id: version
        run: echo "::set-output name=current-version::$(date '+%-y.%-m.%-d')"

      - name: Changelog
        uses: scottbrenner/generate-changelog-action@master
        id: changelog
        env:
          REPO: ${{ github.repository }}

      - name: Delete outdated drafts
        uses: hugo19941994/delete-draft-releases@v0.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release Draft
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          draft: true
          tag_name: v${{ steps.version.outputs.current-version }}
          release_name: v${{ steps.version.outputs.current-version }}
          body: ${{ steps.changelog.outputs.changelog }}

  compile:
    needs: [ draft_release ]

    strategy:
      matrix:
        os: [ windows-latest ]
    #    To compile the application for different platforms, use:
    #    os: [ macos-latest, ubuntu-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14

      # TODO: Install not all dependencies, but only those required for this job
      - run: npm ci

      # The easiest way to transfer release notes to a compiled application is create `release-notes.md` in the build resources.
      # See https://github.com/electron-userland/electron-builder/issues/1511#issuecomment-310160119
      - name: Prepare release notes
        env:
          RELEASE_NOTES: ${{ needs.draft_release.outputs.changelog }} # This needs to Escape quotes
        run: |
          mkdir ./build
          echo "$RELEASE_NOTES" > ./build/release-notes.md

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          build_script_name: build
          args: --config ./config/electron-builder.js

          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: true

          # Sometimes the build may fail due to a connection problem with Apple, GitHub, etc. servers.
          # This option will restart the build as many attempts as possible
          max_attempts: 3
